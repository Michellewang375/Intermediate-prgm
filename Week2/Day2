ARRAYS
• All elements have the same declared type;
• Must initialize all values or will have error
    #include <stdio.h>
    int main() {
        int c[12]; //12 spots, starting from 0
        c[0] = 7; // first element, set its value to 7
        c[11] = 1; // last element
        printf("first c=%d, last c=%d\n", c[0], c[11]);
        return 0; }
• w/ loop:
    #include <stdio.h>
    int main() {
        int c[12]; // elements undefined!
        for(int i = 0; i < 12; i++) {
            c[i] = i; //initialize with value matching index number
        }
    printf("c[4]=%d, c[9]=%d\n", c[4], c[9]);
    return 0; }
• or all the values in {}, almost like a list
    #include <stdio.h>
    int main() {
        int c[5] = {2, 4, 6, 8, 10}; //dont need to type in 5 inside [], can auto figure it out
        printf("c[1]=%d, c[3]=%d\n", c[1], c[3]);
        return 0; }
• another eg: // prints out how many 0,1,2 there are in data --> output: 2, 5, 3
    #include <stdio.h>
    int main() {
        int data[10] = {2, 1, 1, 1, 2, 0, 1, 2, 1, 0};
        int freq[3] = {0, 0, 0};
        for(int i = 0; i < 10; i++) {
            freq[data[i]]++; }
        printf("%d, %d, %d\n", freq[0], freq[1], freq[2]);
        return 0; }



ASCII
• char variable holds a single variable. use single quotes
• works much like intergers
• eg: //say I want to print "c", which is 99 dec. I can also print it by saying "char digit =‘100’- 1;", not digit is value 99 on ASCII, which is 'c'
• C character library -- can use the "#include <ctype,h>" library
    • isalpha - a function that returns true/false
    • isdigit - check if given character is a digit
    • islower - check if lower case
    • isspace - check if white space (true for space, tab, and new line)
    • tolower - convert upper to lower case
    • toupper - convert lower to upper case




STRINGS
• a string is an array of characters with final character equal to the “null character/terminator (\0)”
    char day1[] = "Monday"; //it has 7 characters, not 6 bc of null terminator
    char day2[] = {'m', 'o', 'n', 'd', 'a', 'y', '\0'};
• accessing strings example:
    #include <stdio.h>
    int main() {
    const char str[] = "hello";
    printf("%c %c %c\n", str[1], str[2], str[4]);
    return 0; } //prints "e l o"
• copying string example:
    #include <stdio.h>
    int main() {
    const char str[] = "hello";
    char str_copy[6]; //remember the null!
    for(int i = 0; i < 6; i++) {
        str_copy[i] = str[i]; }
    printf("%s\n", str); //use %s as string format specifier
    printf("%s\n", str_copy);
    return 0; }
• slicing strings using null:
    #include <stdio.h>
    #include <string.h> //include string.h for strlen
    int main() {
        char s[] = "goodbye";
        printf("s = %s\n", s);
        s[4] = '\0'; //replace b with '\0'
        printf("But now, s = %s", s); //now only prints chars
        //up to the (first) '\0'
    //prints: s = goodbye
    //prints: But now, s = good
• string sizes:
    • strlen function returns number of chars before \0
        • printf("s = %s, strlen(%s) = %lu\n", s, s, strlen(s)); --> prints 7 //will return say 4 is null terminator is placed at 'b'
    • sizeof function returns amount of space occupied by variable
        • printf("s = %s, sizeof(%s) = %lu\n", s, s, sizeof(s)); --> prints 8 //will still return 8 even if null terminator is half way
    • here we used %lu (long unsigned) bc that is the return type of strlen and sizeof
    • sizeof(variable) returns the total # of bytes occupied by variable
    • sizeof(type_name) works too
    • char type is one byte, so if s is a char array type, then sizeof(s) tells you the capacity of that array
    • In general for an array: sizeof(array_var) / sizeof(base_type) tells you its declared size (number of elements it can hold)
        • eg code:
            #include <stdio.h>
            int main() {
            char s[] = "goodbye";
            printf("sizeof(s) = %lu, sizeof(s[0]) = %lu\n", sizeof(s), sizeof(s[0])); // prints sizeof(s) = 8, sizeof(s[0]) = 1
            int ra[] = {1, 2, 3, 4, 5};
            printf("sizeof(ra) = %lu, sizeof(int) = %lu\n", sizeof(ra), sizeof(int)); //prints sizeof(ra) = 20, sizeof(int) = 4 (this is because we have 5 values in ra, and each int byte is 4. 4x5=20)
            printf("capacity of ra = %lu\n", sizeof(ra) / sizeof(int)); //prints capacity of ra = 5
            return 0; }
• string operations (#include <string.h> for helpful string functions)
    • strcmp(s1, s2) - compares two strings according to character using ASCII
        • (-): s1 before s2 // strmp("abc", "abd") --> c is before d
        • (0): s1 and s2 equal // strmp("bg", "bg")
        • (+): s1 after s2 // strmp("ac", "acg") --> ac is after acg, one less value
    • strcpy(s1, s2) copy effect is like s1 = s2 (s1 must be declared with a sufficient size)
    • strcat(s1, s2) concatenate effect is like s1 = s1 + s2 (s1 must be declared with a sufficient size)


            








