LIFETIME/SCOPE
• lifetime of a variable: the period of time during which the value exists in memory (ends when we return)
• scope of a variable: the region of code in which the variable name is usable

types of variables
 • Static variables (declared using static keyword)
    • Automatically created and initialized to zero
    • doesnt die, goes back into scope next time it is called (perserves memory)
        int addInt (int x, int y) {
            static int result; // I'm a static variable
            result += x + y; // Add (x+y) to existing result
            return result; }
        int main() {
            printf("addInt(3,4) returns %d\n", addInt(3,4)); //7
            printf("addInt(2,1) returns %d\n", addInt(2,1)); //10 --> 7 + addInt(2,1)
            return 0; }
• Global variables (declared outside any function)
    • Automatically created at program start and initialized to zero
    • scope -- from point of declaration till end of program
    • accessable in any function and functions in other files (after brought into scope using extern <type> <name> in that file)

Variable storing locations (in what region of memory)
• Local variables - stack
    • stack frames are added/removed as functions is called and returned
• static and global variables - data segment
    • The data segment is allocated when program begins, freed when program exits
• Dynamically-allocated memory - heap
    • User is responsible for allocating and freeing memory in the heap







STRUCTS
• structure - A collection of related variables, bundled together into one variable (struct name {} to declare; struct name var to use)
• fields - variables in a struct (use . to refer)
    struct date { //declare
        int year; //fields
        int month;
        int day; };
    int main() {
        struct date today; // like 3 variables in 1 --> today is the variable with type stuct date
        today.year = 2020; // use . to refer to fields
        today.month = 2;
        today.day = 21;
        printf("Today's date: %d/%d/%d\n", today.month, today.day, today.year); //prints 2/21/2020
        // struct date today = {2020, 2, 21}; also works instead of using .
        return 0; }

• can do struct w/in a struct
• sizeof(struct name) --> returns sum of its fields (sum of bytes)
• can nest structs

• can be a function parameter and/or return type --> cannot void or else be changing copy (unless pointer)
    struct date next_day(struct date d) {
      if ((++d.day) > 30) { // assume 30-day months
        d.day = 1;
        if ((++d.month) > 12) {
          d.month = 1;
          d.year++; } }
    return d; }
 • pointer way (* is the same as ->) - pointer way saves space
    • so that we get actual address (any updates will still be vivsble in other functions), else certain changes will not be visible in other functions
    void next_day_in_place(struct date *d) {
      if ((++(*d).day) > 30) {
        (*d).day = 1;
      if ((++(*d).month) > 12) {
        (*d).month = 1;
        (*d).year++; }}}

• array of structs
    struct album {
    const char *name;
    const char *artist;
    double length; };
    struct album music_collection[99999];
    music_collection[0].name = "The Next Day";
    music_collection[0].artist = "David Bowie";
    music_collection[0].length = 41.9;
    sizeof(struct album) // 24 (three 8 byte pointers)
• struct w/ array in it
    struct cc_receipt {
      float amount; // 4 bytes
      char cc_number[16]; }; //16 bytes
  sizeof(struct cc_receipt) // 20

• everything inside is copied when struct passed to function --> array wrapped in strcut is pass by value
• shorthand way of writing structs
    typedef struct { // career statistics
        int year;
        int month;
        int day; };
    } date;
    date today;
    date tomorrow;





RANDOM NUMBERS
• rand() - generates (pseudo) random integers between 0 and RAND_MAX
  • the pseudo random sequence of integers is based on a seed
  • different seed → different sequence of pseudo-random values
• srand( unsigned int ) sets the seed value --> default is seed 1
• srand(time(0)) to generate time dependent random integers (time.h is required)
    srand(time(0)); // Set seed to current time
    for (int i = 0; i < 5; ++i)
    printf(" %d ", rand());

• modulus (%) - constraining the range of values generated by rand()
    rand() 0 to RAND_MAX
    rand() % 100 0 to 99
    rand() % 101 0 to 100
    (rand() % 100) - 50 -50 to 49
    (rand() % 101) - 50 -50 to 50
    ((rand() % 100001) / 100000.0) 0.0 to 1.0









